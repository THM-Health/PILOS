#!/usr/bin/env bash

# If there is a command line argument, run it as the www-data user
if [ $# -gt 0 ]; then
    exec su-exec www-data "$@"
fi

# Helper functions
function setupNginx() {
    # Enable SSL if the files are present
    echo "Checking SSL files"
    if [ -e /local/certs/fullchain.pem -a -e /local/certs/privkey.pem ]; then
        echo "Files found, enabling SSL"
        ln -s /etc/nginx/snippets-available/ssl /etc/nginx/snippets/ssl
    else
        echo "Files not found, skipping SSL"
    fi

    # Set NGINX_WORKER_RLIMIT_NOFILE and NGINX_WORKER_CONNECTIONS
    ULIMIT=$(ulimit -n)

    # If ulimit is low show a warning
    if [ $ULIMIT -lt 4096 ]; then
        echo "WARNING: ulimit is currently set to $ULIMIT. This may cause NGINX issues, please increase the limit to at least 4096."
    fi

    # If NGINX_WORKER_RLIMIT_NOFILE is set to auto
    # set it to the ulimit value
    # using an upper bound limited to 16384 as a measure to protect against excess memory use,
    # and the lower bound of 1024
    if [ "$NGINX_WORKER_RLIMIT_NOFILE" == "auto" ]; then
        NGINX_WORKER_RLIMIT_NOFILE=$ULIMIT
        if [ $NGINX_WORKER_RLIMIT_NOFILE -gt 16384 ]; then
            NGINX_WORKER_RLIMIT_NOFILE=16384
        elif [ $NGINX_WORKER_RLIMIT_NOFILE -lt 1024 ]; then
            NGINX_WORKER_RLIMIT_NOFILE=1024
        fi
    fi

    # If NGINX_WORKER_CONNECTIONS is set to auto
    # use a quarter of the NGINX_WORKER_RLIMIT_NOFILE value
    if [ "$NGINX_WORKER_CONNECTIONS" == "auto" ]; then
        NGINX_WORKER_CONNECTIONS=$(($NGINX_WORKER_RLIMIT_NOFILE / 4))
    fi

    # Set environment variables
    export NGINX_WORKER_RLIMIT_NOFILE=$NGINX_WORKER_RLIMIT_NOFILE
    export NGINX_WORKER_CONNECTIONS=$NGINX_WORKER_CONNECTIONS

    # Set environment variables in nginx config
    envsubst '${NGINX_WORKER_RLIMIT_NOFILE} ${NGINX_WORKER_CONNECTIONS} ${NGINX_WORKER_PROCESSES}' < /etc/nginx/templates/nginx.template > /etc/nginx/nginx.conf
}

function addSupervisorConfig() {
    CONFIG_DIR="/etc/supervisor/conf.d"
    SUPERVISORD_CONFIG="$CONFIG_DIR/supervisord.conf"
    CONFIG="$CONFIG_DIR/$1.conf"

    echo "Adding $CONFIG supervisor config $SUPERVISORD_CONFIG"
    echo >> "$SUPERVISORD_CONFIG"
    echo >> "$SUPERVISORD_CONFIG"
    cat "$CONFIG" >> "$SUPERVISORD_CONFIG"
}

# Set the container role, use 'all' as fallback
CONTAINER_ROLE="${CONTAINER_ROLE:-all}"

case $CONTAINER_ROLE in
  web)
    echo "Web container"

    pilos-cli storage:link

    setupNginx

    addSupervisorConfig 'nginx'
    addSupervisorConfig 'php-fpm'

    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
    ;;

  dev)
    echo "Dev container"

    pilos-cli optimize:clear

    if [ "$ENABLE_XDEBUG" == "yes" ]; then
        echo "Enabling xdebug"
        docker-php-ext-enable xdebug
    fi

    setupNginx

    echo "Enabling opcache timestamps"
    sed -i 's/opcache.validate_timestamps=.*/opcache.validate_timestamps=1/' /usr/local/etc/php/conf.d/opcache.ini

    addSupervisorConfig 'nginx'
    addSupervisorConfig 'php-fpm'
    addSupervisorConfig 'cron'
    addSupervisorConfig 'horizon'

    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
    ;;

  all)
    echo "All-in-one container"

    pilos-cli init
    pilos-cli storage:link

    setupNginx

    addSupervisorConfig 'nginx'
    addSupervisorConfig 'php-fpm'
    addSupervisorConfig 'cron'
    addSupervisorConfig 'horizon'

    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
    ;;
  *)
    echo "Invalid container role '$CONTAINER_ROLE' use one of: web, dev, all"
    exit 1
    ;;
esac
